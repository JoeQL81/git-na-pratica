= Regras para edição deste arquivo:

Este é um projeto colaborativo. Isso quer dizer que outras pessoas vão mexer no arquivo, editando o que você escreveu, ampliando ou mesmo apagando. A vida é assim, e é assim que os grandes projetos open souce funcionam.
Para facilitar a vida de todos algumas regras simples, que se forem seguidas tornam tudo mais fácil para todos:

   1. Não se preocupe com a formatação do texto por enquanto. Ela é importante, mas não definimos como fazer ainda. Se quiser usar formatação use-a, mas preocupe-se em manter algo que fique claro para todos (por exemplo usar fonte courier para exemplos ou tabulações).
   2. Evite simplesmente apagar o que outra pessoa escreveu. Em outros projetos deste tipo que participei usávamos o recurso de tachado no texto, comentários entre colchetes e novo texto na frente. Isso funcionou muito bem, e gostaria de usar aqui. Portanto se você não gostar de algo que eu escreví simplesmente coloque um tachado [menu format, strikethrough] e a correção na frente.
   3. Para sugerir tópicos simplesmente adicione ao indice, na próxima página. Cada tópico teóricamente será um capítulo, então para o digitar adicione uma quebra de linha, defina o título como heading1 e meta bronca.
   4. Para chamar atenção use cores de fundo ao invés de fontes grandes. 


Acho que é isso. Adicione seu nome na lista de colaboradores a seguir e mãos a obra.


= Colaboradores: (em ordem alfabética)

    * Bruno Barros (bkether@gmail.com)
    * Emerson Vinicius (duke.m16@gmail.com)
    * Fernando Ribeiro (ferbass@gmail.com)
    * Guilherme Ceolin (guiceolin@gmail.com)
    * Lucas Catón (lucacaton@gmail.com)
    * Luciano Sousa (ls@lucianosousa.net)
    * Marcelo Fontes Castellani (marcelo@mindaslab.com)
    * Roberta Soares (robs.soares@gmail.com)
    * Rodolfo Luiz (rodolfols@gmail.com)


= Tópicos que serão abordados

   1. O que é o Git e para que serve;
   2. Instalando e configurando o Git (OSX, Linux e Windows).
   3. Criação de um repositório local, adição de arquivos e primeiro commit;
   4. Adicionando um repositório remoto e enviando as coisas para lá;
   5. Usando o git no dia a dia


= Tópicos futuros

   6. Git GUI tools
         1. Linux
               1. gitg
               2. gitk
         2. OSX
         3. Windows
   7. Como colaborar em um projeto open source com o git;
   8. Github
   9. Arquivo de configuração (~/.gitconfig)



= O que é o Git e para que serve
Para essa parte será que podemos usar estes links como base?

http://pt.wikipedia.org/wiki/Git
http://git-scm.com/about

Afinal isso será um “software livre”

Git é um software livre e aberto utilizado para controle de versão, focado em velocidade e usabilidade.

Faça uma avaliação rápida da situação da sua equipe de desenvolvimento:

    * Alguém já sobrescreveu o código de outra pessoa por acidente e acabou perdendo as alterações?

    * Tem dificuldades em saber quais as alterações efetuadas em um programa, quando foram feitas e quem fez?
    * Tem dificuldade em recuperar o código de uma versão anterior que está em produção?
    * Tem problemas em manter variações do sistema ao mesmo tempo?


Se alguma das perguntas acima teve um sim como resposta, então sua equipe necessita urgentemente de um sistema para controle de versão!

= Para que serve o Controle de Versão ?

O Controle de versão apóia o desenvolvimento de diversas maneiras:

    * Histórico. Registra toda a evolução do projeto, cada alteração sobre cada arquivo. Com essas informações sabe-se quem fez o que, quando e onde. Além disso, permite reconstruir uma revisão específica do arquivo sempre que desejado;
    * Colaboração. O controle de versão possibilita que vários desenvolvedores trabalhem em paralelo sobre os mesmo arquivos sem que um sobrescreva o código de outro, o que traria reaparecimento de defeitos e perda de funcionalidades;
    * Variações no Projeto. Mantém linhas diferentes de evolução do mesmo projeto. Por exemplo, mantendo uma versão 1.0 enquanto a equipe prepara uma versão 2.0.



= Como funciona o Controle de Versão ?
O controle de versão é composto de duas partes: o repositório e a área de trabalho. O repositório armazena todo o histórico de evolução do projeto, registrando toda e qualquer alteração feita em cada item versionado.
O desenvolvedor não trabalha diretamente nos arquivos do repositório. Ao invés disso, usa uma área/cópia de trabalho que contém a cópia dos arquivos do projeto e que é monitorada para identificar as mudanças realizadas. Essa área é individual e isolada das demais áreas de trabalho.

A sincronização entre a área de trabalho e o repositório é feita através dos comandos de commit e update.
O commit envia um pacote contendo uma ou mais modificações feitas na área de trabalho (origem) ao repositório (destino). O update faz o inverso, isto é, envia as modificações contidas no repositório (origem) para a área de trabalho (destino).
Cada commit gera uma nova revisão no repositório, contendo as modificações feitas, data e autor. Uma revisão funciona como uma "foto" de todos os arquivos e diretórios em um determinado momento da evolução do projeto. As "fotos" antigas são mantidas e podem ser recuperadas e analisadas sempre que desejado. O conjunto dessas revisões é justamente o histórico do projeto.

= Controle de Versão Centralizado
O controle de versão centralizado segue a topologia em estrela, havendo apenas um único repositório central mas várias cópias de trabalho, uma para cada desenvolvedor. A comunicação entre uma área de trabalho e outra passa obrigatoriamente pelo repositório central.

No controle de versão centralizado há um único repositório e várias cópias de trabalho que se comunicam apenas através do repositório central.

= Controle de Versão Distribuído
São vários repositórios autônomos e independentes, um para cada desenvolvedor. Cada repositório possui uma área de trabalho acoplada e as operações commit e update acontecem localmente entre os dois.

No controle de versão distribuído cada desenvolvedor possui um repositório próprio acoplado a uma área de trabalho. A comunicação entre eles continua sendo através de commit e update.

Um repositório pode se comunicar com qualquer outro através de duas operações básicas: pull e push:

    * Pull (Puxar). Atualiza o repositório local (destino) com todas as alterações feitas em outro repositório (origem).
    * Push (Empurrar). Envia as alterações do repositório local (origem) para um outro repositório (destino).



Centralizado	Distribuído	Função
checkout	clone	criação da cópia de trabalho/repositório
commit	commit	envia alterações para o repositório, criando uma revisão
update	update	atualiza a cópia/área de trabalho em uma revisão
	pull	importa revisões feitas em outro repositório
	push	envia revisões locais para outro repositório


= Instalando e configurando o Git

= OSX
Para instalar o Git no OSX podemos fazer de diversas maneiras, vamos abordar as 3 mais comuns, através do MacPorts, HomeBrew e pelo pacote pré-compilado.
Para todas as opções abaixo é recomendado que você tenha instalado o Xcode

          o HomeBrew

                +         1. Instale o HomeBrew, caso já tenha instalado ir para o próximo passo;
                +         2. Abra o terminal;
                +         3. Digite brew install git;
                +        
                +         Pontro agora é so aguardar e seu git será instalado
+

          o MacPorts


        1. Instale o MacPorts, caso já tenha instalado basta ir para o próximo passo
        2. Abra o terminal
        3. É muito importante que seu MacPorts esteja atualizado, para isso digite sudo port -v selfupdate
        4. Agora basta digitar sudo port install git-core +svn
       

Pontro agora é so aguardar e seu git será instalado

          o Pacote pré-compilado

          o     1. Baixe o pacote pré-compilado através do endereço http://code.google.com/p/git-osx-installer/


        2. Monte o disco .dmg
        3. Instale o package
        4.

= LINUX
Para instalar o Git no Linux, também podemos fazer de várias formas. Dependendo da distribuição que você usar pode ser extremamente simples.

          o Debian / Ubuntu

                +         1. Abra um terminal de digite: sudo aptitude install git-core;
+



= WINDOWS

-- alguém usa Windows aqui???
-- mesmo que ninguém use, acho interessante pesquisármos e incluirmos essa informação, pra ficar algo completo =]  (by Catón)
msysgit é o ambiente melhor pra windows, depois ajudo nisso (qmx)


Criação de um repositório local, adição de arquivos e primeiro commit

Vamos começar da maneira mais simples possível, criar uma aplicação Rails e a adicionar a um repositório Git. Para isso abra o terminal e crie um projeto Rails:

$ rails git_na_pratica
     create  
     create  app/controllers
     create  app/helpers
     create  app/models
     [......]
     create  doc/README_FOR_APP
     create  log/server.log
     create  log/production.log
     create  log/development.log
     create  log/test.log

Entre no diretório do projeto e inicie o repositório com o comando git init:

$ cd git_na_pratica/
$ git init
Initialized empty Git repository in /home/desenvolvimento/git_na_pratica/.git/

Você pode encontrar um diretório .git agora dentro de seu diretório. É nesse diretório que o Git guarda todas as informações, diferente do SVN e do CVS, que criam uma pasta para cada pasta de seu projeto.

$ ls -al
total 72
drwxr-xr-x 14 castellani castellani  4096 2010-07-27 10:01 .
drwxr-xr-x 15 castellani castellani  4096 2010-07-27 10:00 ..
drwxr-xr-x  6 castellani castellani  4096 2010-07-27 10:00 app
drwxr-xr-x  5 castellani castellani  4096 2010-07-27 10:00 config
drwxr-xr-x  2 castellani castellani  4096 2010-07-27 10:00 db
drwxr-xr-x  2 castellani castellani  4096 2010-07-27 10:00 doc
drwxr-xr-x  7 castellani castellani  4096 2010-07-27 10:01 .git
drwxr-xr-x  3 castellani castellani  4096 2010-07-27 10:00 lib
drwxr-xr-x  2 castellani castellani  4096 2010-07-27 10:00 log
drwxr-xr-x  5 castellani castellani  4096 2010-07-27 10:00 public
-rw-r--r--  1 castellani castellani   307 2010-07-27 10:00 Rakefile
-rw-r--r--  1 castellani castellani 10011 2010-07-27 10:00 README
drwxr-xr-x  3 castellani castellani  4096 2010-07-27 10:00 script
drwxr-xr-x  7 castellani castellani  4096 2010-07-27 10:00 test
drwxr-xr-x  6 castellani castellani  4096 2010-07-27 10:00 tmp
drwxr-xr-x  3 castellani castellani  4096 2010-07-27 10:00 vendor

Vamos agora realizar o primeiro commit de nosso projeto. Para começar vamos adicionar todos os arquivos da pasta com o comando git add . (ou git add --all). Esse comando informa ao git que desejamos adicionar ao controle de versão todos os arquivos e diretórios da pasta onde estamos, recursivamente.

$ git add .

Depois vamos realizar o primeiro commit utilizando o comando git commit -a -m "Primeiro Commit". A opção -a (ou --all)indica que o commit será para todos os arquivos modificados, renomeados ou apagados. Para arquivos novos você deve obrigatóriamente usar o git add antes do git commit. Já a opção -m informa a mensagem de commit.

Ao invés de git commit -a -m "Primeiro Commit" também é possível usar git commit -am "Primeiro Commit".

$ git commit -am "Primeiro Commit"
[master (root-commit) 6316e12] Primeiro Commit
42 files changed, 8461 insertions(+), 0 deletions(-)
create mode 100644 README
create mode 100644 Rakefile
create mode 100644 app/controllers/application_controller.rb
create mode 100644 app/helpers/application_helper.rb
create mode 100644 config/boot.rb
create mode 100644 config/database.yml
[......]
create mode 100644 test/performance/browsing_test.rb
create mode 100644 test/test_helper.rb

Para ver o seu commit use git log. Você verá uma listagem com a mensagem de commit, o autor e outros dados.

$ git log
commit 6316e121fa36b01bb17e437b5a596bf53d1fbe3c
Author: Marcelo Castellani <castellani@castellani-desktop.(none)>
Date:   Tue Jul 27 10:11:16 2010 -0300

   Primeiro Commit

Outro comando muito útil é o git status, que mostra quais arquivos foram modificados e em qual branch estamos trabalhando. Vamos falar sobre branchs mais a frente, não se preocupe com isso agora.

$ git status
# On branch master
nothing to commit (working directory clean)


Adicionando um repositório remoto e enviando as coisas para lá
Para criar um repositório remoto precisamos seguir os seguintes passos:

   1. Criando repositório e iniciando o repositório

    * Abra o Terminal
    * Acesse seu servidor via ssh (ssh usuario@servidor.com)
    * Crie um diretório no local desejado com a extensão .git (mkdir projeto.git)
    * Entre no diretório criado (cd projeto.git)
    * Inicie o repositório com o comando git --bare init




= Usando o git no dia a dia

No dia o git é uma ferramenta super pratica para se usar, normalmente no processo de versionamento do codigo ira usar comandos como add, rm, commit, e push

git add
Como é de se imaginar, esse comando adiciona os arquivos em um repositório temporário para em breve ser comitado

git rm


git commit -m “descrição do commit”

git commit -am “descrição do commit”
